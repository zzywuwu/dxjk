push_stream_shared_memory_size                100m;
push_stream_max_channel_id_length             200;
# max messages to store in memory
push_stream_max_messages_stored_per_channel   20;
# message ttl
push_stream_message_ttl                       5m;
# ping frequency
push_stream_ping_message_interval             30s;
# connection ttl to enable recycle
push_stream_subscriber_connection_ttl         15m;
# connection ttl for long polling
push_stream_longpolling_connection_ttl        600s;
push_stream_timeout_with_body                 off;

# wildcard
push_stream_wildcard_channel_prefix         "broad_";
push_stream_wildcard_channel_max_qtd        3;

push_stream_message_template                "{\"id\":~id~,\"channel\":\"~channel~\",\"text\":\"~text~\", \"tag\":\"~tag~\", \"time\":\"~time~\", \"eventid\":\"~eve
nt-id~\"}";

# subscriber may create channels on demand or only authorized (publisher) may do it?
push_stream_authorized_channels_only        off;
push_stream_allowed_origins                 "*";

server {
	listen      127.0.0.1:9080;
	server_name push_server;

	location /channels-stats {
		# activate channels statistics mode for this location
		push_stream_channels_statistics;

		# query string based channel id
		push_stream_channels_path               $arg_id;
	}

	location /pub {
		# activate publisher mode for this location, with admin support
		push_stream_publisher admin;

		# query string based channel id
		push_stream_channels_path               $arg_id;

		# store messages in memory
		push_stream_store_messages              on;

		# Message size limit
		# client_max_body_size MUST be equal to client_body_buffer_size or
		# you will be sorry.
		client_max_body_size                    32k;
		client_body_buffer_size                 32k;
	}	

	location ~ /sub/(.*) {
		# activate subscriber mode for this location
		push_stream_subscriber                  long-polling;

		# positional channel path
		push_stream_channels_path                   $1;
		if ($arg_tests = "on") {
			push_stream_channels_path                 "test_$1";
		}

		# header to be sent when receiving new subscriber connection

		# message template
		push_stream_message_template                "{\"id\":~id~,\"channel\":\"~channel~\",\"text\":\"~text~\"}";
		# footer to be sent when finishing subscriber connection
		# content-type

		push_stream_longpolling_connection_ttl        600s;

		if ($arg_qs = "on") {
			push_stream_last_received_message_time "$arg_time";
			push_stream_last_received_message_tag  "$arg_tag";
			push_stream_last_event_id              "$arg_eventid";
		}
	}
	location ~ /ev/(.*) {
		# activate event source mode for this location
		push_stream_subscriber eventsource;

		# positional channel path
		push_stream_channels_path                   $1;
		if ($arg_tests = "on") {
		push_stream_channels_path                 "test_$1";
		}

		if ($arg_qs = "on") {
			push_stream_last_received_message_time "$arg_time";
			push_stream_last_received_message_tag  "$arg_tag";
			push_stream_last_event_id              "$arg_eventid";
		}
	}

	location ~ /lp/(.*) {
		# activate long-polling mode for this location
		push_stream_subscriber      long-polling;

		# positional channel path
		push_stream_channels_path         $1;
		if ($arg_tests = "on") {
			push_stream_channels_path                 "test_$1";
		}

		if ($arg_qs = "on") {
			push_stream_last_received_message_time "$arg_time";
			push_stream_last_received_message_tag  "$arg_tag";
			push_stream_last_event_id              "$arg_eventid";
		}
	}

	location ~ /jsonp/(.*) {
		# activate long-polling mode for this location
		push_stream_subscriber      long-polling;

		push_stream_last_received_message_time "$arg_time";
		push_stream_last_received_message_tag  "$arg_tag";
		push_stream_last_event_id              "$arg_eventid";

		# positional channel path
		push_stream_channels_path         $1;
		if ($arg_tests = "on") {
		push_stream_channels_path                 "test_$1";
		}
	}

	location ~ /ws/(.*) {
		# activate websocket mode for this location
		push_stream_subscriber websocket;

		# positional channel path
		push_stream_channels_path                   $1;
		if ($arg_tests = "on") {
			push_stream_channels_path                 "test_$1";
		}

		# store messages in memory
		push_stream_store_messages              on;

		push_stream_websocket_allow_publish     on;

		if ($arg_qs = "on") {
		push_stream_last_received_message_time "$arg_time";
		push_stream_last_received_message_tag  "$arg_tag";
		push_stream_last_event_id              "$arg_eventid";
		}
	}
}